#!/usr/bin/env python

import sys
import os
from optparse import OptionParser
from datetime import datetime
import copy
import locale
import time

from irg.irg import CactiIRG, ZabbixIRG, get_param_monthly, get_image_info
from irg.repoti import Report, populate_words, replace_words

class App:
    def __init__(self):
        self.parse_args()

    def parse_args(self):
        now = datetime.now()
        usage = 'usage: %prog [options] cacti_url'
        parser = OptionParser(usage=usage)

        parser.add_option('-v', '--verbose', dest='verbose',
                          default=False, action='store_true',
                          help='Enable verbose mode [no]')
        parser.add_option('-u', '--user', dest='user',
                          help='Cacti/Zabbix username [required]')
        parser.add_option('-p', '--password', dest='password',
                          help='Cacti/Zabbix password [required]')
        parser.add_option('-y', '--year', dest='year', type='int',
                          default=now.year,
                          help='Year [%d]' % now.year)
        parser.add_option('-m', '--month', dest='month', type='int',
                          default=now.month,
                          help='Month [%d]' % now.month)
        parser.add_option('--range', dest='range',
                          help='Date range YYYYMMDD-YYYYMMDD')
        parser.add_option('-r', '--report', dest='report',
                          default='report',
                          help='Report template name [report or report1,report2,report3]')
        parser.add_option('--header', dest='header',
                          default='REPORT_header.odt',
                          help='Header filename with REPORT substitution [report_header.odt]')
        parser.add_option('--footer', dest='footer',
                          default='REPORT_footer.odt',
                          help='Footer filename with REPORT substitution [report_footer.odt]')
        parser.add_option('--type', dest='type', default = 'cacti',
                            help = 'Report source type (cacti or zabbix)')
        parser.add_option('-o', '--output', dest='output',
                          default='REPORT_YYYYMM.odt',
                          help='Output filename with REPORT, YYYY, MM substitution [report_%d%d.odt]' % (now.year, now.month))

        self.options, self.args = parser.parse_args()

        if len(self.args) != 1 or \
           not self.options.user or not self.options.password:
            parser.print_help()
            sys.exit(-1)
        self.url = self.args[0]

        if self.options.range:
            start_date, end_date = self.options.range.split('-')
            start = time.strptime(start_date + '_000000', '%Y%m%d_%H%M%S')
            self.options.year = start[0]
            self.options.month = start[1]
            self.options.start = time.mktime(start)
            self.options.end = time.mktime(time.strptime(end_date + '_000000', '%Y%m%d_%H%M%S'))

        #print self.options.start
        #print self.options.end

        self.keywords = [('REPORT', str(self.options.report)),
                         ('YYYY', str(self.options.year)),
                         ('MM', str(self.options.month))]
        self.keywords += populate_words(self.options.year, self.options.month)

        self.options.output = replace_words(self.options.output, self.keywords)
        self.options.header = replace_words(self.options.header, self.keywords)
        self.options.footer = replace_words(self.options.footer, self.keywords)

    def run(self):
        if self.options.type == 'cacti' :
            irg = CactiIRG(self.url, self.options.user, self.options.password,
                  verbose=self.options.verbose)
        elif self.options.type == 'zabbix' :
            irg = ZabbixIRG(self.url, self.options.user, self.options.password,
                  verbose=self.options.verbose)
        else :
            sys.exit(255)
        report = Report(irg, verbose=self.options.verbose)
        if os.path.exists(self.options.header):
            report.insert_doc(self.options.header, self.keywords)
        report.setup_styles()
        if self.options.range:
            report.generate_range(self.options.start, self.options.end,
                                    self.options.report.split(','))
        else:
            report.generate_monthly(self.options.year, self.options.month,
                                    self.options.report.split(','))
        if os.path.exists(self.options.footer):
            report.insert_doc(self.options.footer, self.keywords)
        report.save(self.options.output)

if __name__ == '__main__':
    app = App()
    app.run()
